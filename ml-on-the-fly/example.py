import os
import pandas as pd
import json
from ml_service import MLService

"""
This script demonstrates how to use the ML on-the-fly API with the Iris dataset sample CSV file.
It follows the complete workflow of:
1. Uploading a CSV file
2. Selecting a target column
3. Generating a model
4. Training the model
5. Getting insights
6. Making predictions
7. Getting model code and source
"""

def main():
    # Create ML service
    ml_service = MLService()
    
    # 1. Upload CSV file
    print("\n1. Uploading CSV file...")
    csv_file = "sample_data.csv"  # Path to CSV file
    
    try:
        with open(csv_file, 'rb') as f:
            file_content = f.read()
        result = ml_service.process_csv(file_content)
    except FileNotFoundError:
        print(f"Error: File {csv_file} not found!")
        return
    
    if not result.get("success", False):
        print(f"Error: {result.get('error', 'Unknown error')}")
        return
        
    print("CSV uploaded and processed successfully.")
    
    # Print data summary
    data_summary = result["data_summary"]
    print("\nData Summary:")
    print(f"- Rows: {data_summary['num_rows']}")
    print(f"- Columns: {data_summary['num_cols']}")
    print(f"- Available columns: {', '.join(data_summary['columns'])}")
    
    # 2. Select target column
    print("\n2. Selecting target column: target")
    target_column = "target"
    result = ml_service.select_target_column(target_column)
    
    if not result.get("success", False):
        print(f"Error: {result.get('error', 'Unknown error')}")
        return
        
    print(f"Target column selected. Detected problem type: {result['problem_type']}")
    
    # 3. Generate model
    print("\n3. Generating model...")
    result = ml_service.generate_model()
    
    if not result.get("success", False):
        print(f"Error: {result.get('error', 'Unknown error')}")
        return
        
    print(f"Model generated successfully. Problem type: {result['problem_type']}")
    if 'model_source' in result:
        print(f"Model was created using: {result['model_source']}")
    
    # 4. Train model
    print("\n4. Training model...")
    result = ml_service.train_model()
    
    if not result.get("success", False):
        print(f"Error: {result.get('error', 'Unknown error')}")
        return
        
    print("Model trained successfully.")
    
    print("\nTraining summary:")
    print(json.dumps(result["training_summary"], indent=2))
    
    # 5. Get insights
    print("\n5. Getting insights...")
    result = ml_service.get_insights()
    
    if not result.get("success", False):
        print(f"Error: {result.get('error', 'Unknown error')}")
        return
        
    print("\nModel Insights:")
    print(json.dumps(result["insights"], indent=2))
    
    # 6. Make predictions
    print("\n6. Making a prediction...")
    # Get first sample from dataset
    df = pd.read_csv(csv_file)
    sample = df.drop(columns=[target_column]).iloc[0].to_dict()
    
    # Make prediction
    result = ml_service.predict(sample)
    
    if not result.get("success", False):
        print(f"Error: {result.get('error', 'Unknown error')}")
        return
        
    print("\nPrediction result:")
    print(result["prediction"])
    
    # Make another prediction with a different sample
    sample2 = df.drop(columns=[target_column]).iloc[50].to_dict()
    result = ml_service.predict(sample2)
    
    if not result.get("success", False):
        print(f"Error: {result.get('error', 'Unknown error')}")
        return
        
    print("\nPrediction result for second sample:")
    print(result["prediction"])
    
    # 7. Get model code
    print("\n7. Getting model code...")
    result = ml_service.get_model_code()
    
    if not result.get("success", False):
        print(f"Error: {result.get('error', 'Unknown error')}")
        return
    
    # Display the model source first
    if 'model_source' in result:
        print(f"\nModel was generated by: {result['model_source']}")
    
    # Display the first 10 lines of the model code
    code_lines = result["model_code"].split('\n')
    print("\nGenerated Model Code (first 10 lines):")
    for i in range(min(10, len(code_lines))):
        print(code_lines[i])
    print("...")
    
if __name__ == "__main__":
    main() 